package perfumearomasalesmanagementsystem;


import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author cherryphoopyae
 */
public class OrderManagement extends javax.swing.JFrame {
    int id; // for order id
    String cus_name;
    DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
   
    /**
     * Creates new form OrderManagement
     */
    public OrderManagement() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        C_Name = new javax.swing.JTextField();
        ItemTotal = new javax.swing.JTextField();
        Status = new javax.swing.JComboBox<>();
        DeliveryType = new javax.swing.JComboBox<>();
        UpdateButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        SearchByCustomerName = new javax.swing.JButton();
        SearchName = new javax.swing.JTextField();
        SearchByDate = new javax.swing.JButton();
        SearchDate = new javax.swing.JTextField();
        SearchByDeliveryType = new javax.swing.JButton();
        SearchDeliveryType = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        SearchDueDate = new javax.swing.JTextField();
        ViewAll = new javax.swing.JButton();
        OrderDate = new org.jdesktop.swingx.JXDatePicker();
        DueDate = new org.jdesktop.swingx.JXDatePicker();
        orderDate = new javax.swing.JLabel();
        dueDate = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setText("Order Management");

        jLabel2.setText("Order Date");

        jLabel3.setText("Customer Name");

        jLabel4.setText("Item Total");

        jLabel6.setText("Status");

        jLabel7.setText("Due Date");

        jLabel8.setText("Delivery Type");

        Status.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Pending", "Delivered"}));
        Status.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StatusActionPerformed(evt);
            }
        });

        DeliveryType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "By Car", "By ship", "By Train" }));

        UpdateButton.setText("Update");
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });

        jButton2.setText("View Detail");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table);

        jButton3.setText("View Report");

        SearchByCustomerName.setText("Search By Customer Name");
        SearchByCustomerName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByCustomerNameActionPerformed(evt);
            }
        });

        SearchByDate.setText("Search By Date");
        SearchByDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByDateActionPerformed(evt);
            }
        });

        SearchByDeliveryType.setText("Search By Delivery Type");
        SearchByDeliveryType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchByDeliveryTypeActionPerformed(evt);
            }
        });

        jButton1.setText("Search By Due Date");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ViewAll.setText("View All");
        ViewAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewAllActionPerformed(evt);
            }
        });

        OrderDate.setFormats(new String[]{"yyyy-MM-dd"});
        OrderDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrderDateActionPerformed(evt);
            }
        });

        DueDate.setFormats(new String[]{"yyyy-MM-dd"});
        DueDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DueDateActionPerformed(evt);
            }
        });

        orderDate.setText("jLabel5");

        dueDate.setText("jLabel5");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ViewAll))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel8)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel7)
                                        .addComponent(orderDate))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(UpdateButton)
                                        .addGap(16, 16, 16)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton2)
                                    .addComponent(C_Name)
                                    .addComponent(ItemTotal)
                                    .addComponent(Status, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(DeliveryType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(OrderDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(DueDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(14, 14, 14)
                                        .addComponent(dueDate)))))))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SearchByCustomerName)
                            .addComponent(SearchByDate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SearchDate, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                            .addComponent(SearchName))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SearchByDeliveryType)
                            .addComponent(jButton1))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(176, 176, 176)
                                .addComponent(jLabel11))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SearchDeliveryType, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                    .addComponent(SearchDueDate))))))
                .addContainerGap(75, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel11)
                                    .addComponent(SearchByCustomerName)
                                    .addComponent(SearchName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SearchByDeliveryType)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(orderDate)
                                    .addComponent(dueDate))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(SearchByDate))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(C_Name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(OrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(ItemTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(56, 56, 56)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel6)
                                    .addComponent(Status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(DueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel8)
                                    .addComponent(DeliveryType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(UpdateButton)
                                    .addComponent(jButton2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton3)
                                    .addComponent(ViewAll)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(SearchDeliveryType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(SearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(SearchDueDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StatusActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StatusActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        getTable();
        orderDate.setVisible(false);
        dueDate.setVisible(false);
        
    }//GEN-LAST:event_formWindowOpened
    private void getTable(){
        String [] ColumnName = {"Customer Name","Order Date", "Item Total","Status","Due Date","Delivery Type"};
        String c_name = "";
        String order_date = "";
        int item_total = 0;
        String status ="";
        String due_date ="";
        String delivery_type = "";
        
       
        
        DefaultTableModel model = new DefaultTableModel();
         model.setColumnIdentifiers(ColumnName);

          Table.setModel(model);
          
          Connection con = myConn.getConnection();
          
          try{
              String sql = "SELECT * FROM OrderManagement";
              PreparedStatement ps = con.prepareStatement(sql);
              ResultSet rs = ps.executeQuery();
              
              while(rs.next())
              {
                   c_name = rs.getString("CustomerName");
                   order_date = rs.getString("OrderDate");
                   item_total = rs.getInt("ItemTotal");
                   status = rs.getString("Status");
                   due_date= rs.getString("DueDate");
                   delivery_type = rs.getString("DeliveryType");
              
              model.addRow(new Object[]{c_name, order_date,item_total,status,due_date,delivery_type});
              }
              
              
          }
          catch(SQLException e){
              System.out.println(e.getMessage());
              
          }
    }
    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
         int index = Table.getSelectedRow();
         C_Name.setText((String)Table.getValueAt(index,0));
         OrderDate.getEditor().setText((String)Table.getValueAt(index,1));
         ItemTotal.setText(Integer.toString((int) Table.getValueAt(index,2)));
         Status.setSelectedItem((String)Table.getValueAt(index, 3));
         DueDate.getEditor().setText((String)Table.getValueAt(index, 4));
         DeliveryType.setSelectedItem((String)Table.getValueAt(index,5));
         
         try{
             Connection con = myConn.getConnection();
             String sql = "SELECT OrderID,CustomerName FROM OrderManagement WHERE CustomerName=?";
             PreparedStatement ps = con.prepareStatement(sql);
             ps.setString(1,(String)C_Name.getText() );
             ResultSet rs = ps.executeQuery();
             
             
             while(rs.next()){
                 id = rs.getInt("OrderID");
                 cus_name = rs.getString("CustomerName");
                 
                 
             }
             System.out.println("Name is " + cus_name);
              
             
             
             
         }
         catch(SQLException e){
             System.out.println(e.getMessage());
             
         }
         
    }//GEN-LAST:event_TableMouseClicked

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
        // TODO add your handling code here:
        try{
            Connection con = myConn.getConnection();
            String sql = "UPDATE OrderManagement SET CustomerName=?,OrderDate=?,ItemTotal=?,Status=?,DueDate=?,DeliveryType=? WHERE OrderID = ?";
            PreparedStatement ps = con.prepareStatement(sql);
          
 
         
           
            ps.setString(1,(String)C_Name.getText() );
            ps.setString(2,(String)orderDate.getText());
            ps.setString(3,(String)ItemTotal.getText() );
            ps.setString(4,(String)Status.getSelectedItem() );
            ps.setString(5,(String)dueDate.getText());
            ps.setString(6,(String)DeliveryType.getSelectedItem() );
            ps.setInt(7,id);
           

            

            
            ps.executeUpdate();
            
        }
        catch (SQLException e){
            System.out.println(e.getMessage());
        }
        getTable();
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void SearchByCustomerNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByCustomerNameActionPerformed
        // TODO add your handling code here:
        String [] ColumnName = {"Customer Name","Order Date", "Item Total","Status","Due Date","Delivery Type"};
        String c_name = "";
        String order_date = "";
        int item_total = 0;
        String status ="";
        String due_date ="";
        String delivery_type = "";
        
        
        DefaultTableModel model = new DefaultTableModel();
         model.setColumnIdentifiers(ColumnName);

          Table.setModel(model);
          
          Connection con = myConn.getConnection();
          
          try{
              String sql = "SELECT * FROM OrderManagement WHERE CustomerName = ?";
              PreparedStatement ps = con.prepareStatement(sql);
              ps.setString(1,(String)SearchName.getText());
              ResultSet rs = ps.executeQuery();
              
              while(rs.next())
              {
                   c_name = rs.getString("CustomerName");
                   order_date = rs.getString("OrderDate");
                   item_total = rs.getInt("ItemTotal");
                   status = rs.getString("Status");
                   due_date= rs.getString("DueDate");
                   delivery_type = rs.getString("DeliveryType");
              
              model.addRow(new Object[]{c_name, order_date,item_total,status,due_date,delivery_type});
              }
              
              
          }
          catch(SQLException e){
              System.out.println(e.getMessage());
              
          }
        
    }//GEN-LAST:event_SearchByCustomerNameActionPerformed

    private void SearchByDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByDateActionPerformed
        // TODO add your handling code here:
        String [] ColumnName = {"Customer Name","Order Date", "Item Total","Status","Due Date","Delivery Type"};
        String c_name = "";
        String order_date = "";
        int item_total = 0;
        String status ="";
        String due_date ="";
        String delivery_type = "";
        
        
        DefaultTableModel model = new DefaultTableModel();
         model.setColumnIdentifiers(ColumnName);

          Table.setModel(model);
          
          Connection con = myConn.getConnection();
          
          try{
              String sql = "SELECT * FROM OrderManagement WHERE OrderDate = ?";
              PreparedStatement ps = con.prepareStatement(sql);
              ps.setString(1,(String)SearchDate.getText());
              ResultSet rs = ps.executeQuery();
              
              while(rs.next())
              {
                   c_name = rs.getString("CustomerName");
                   order_date = rs.getString("OrderDate");
                   item_total = rs.getInt("ItemTotal");
                   status = rs.getString("Status");
                   due_date= rs.getString("DueDate");
                   delivery_type = rs.getString("DeliveryType");
              
              model.addRow(new Object[]{c_name, order_date,item_total,status,due_date,delivery_type});
              }
              
              
          }
          catch(SQLException e){
              System.out.println(e.getMessage());
              
          }
        
    }//GEN-LAST:event_SearchByDateActionPerformed

    private void SearchByDeliveryTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchByDeliveryTypeActionPerformed
        // TODO add your handling code here:
        String [] ColumnName = {"Customer Name","Order Date", "Item Total","Status","Due Date","Delivery Type"};
        String c_name = "";
        String order_date = "";
        int item_total = 0;
        String status ="";
        String due_date ="";
        String delivery_type = "";
        
        
        DefaultTableModel model = new DefaultTableModel();
         model.setColumnIdentifiers(ColumnName);

          Table.setModel(model);
          
          Connection con = myConn.getConnection();
          
          try{
              String sql = "SELECT * FROM OrderManagement WHERE DeliveryType = ?";
              PreparedStatement ps = con.prepareStatement(sql);
              ps.setString(1,(String)SearchDeliveryType.getText());
              ResultSet rs = ps.executeQuery();
              
              while(rs.next())
              {
                   c_name = rs.getString("CustomerName");
                   order_date = rs.getString("OrderDate");
                   item_total = rs.getInt("ItemTotal");
                   status = rs.getString("Status");
                   due_date= rs.getString("DueDate");
                   delivery_type = rs.getString("DeliveryType");
              
              model.addRow(new Object[]{c_name, order_date,item_total,status,due_date,delivery_type});
              }
              
              
          }
          catch(SQLException e){
              System.out.println(e.getMessage());
              
          }
        
    }//GEN-LAST:event_SearchByDeliveryTypeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String [] ColumnName = {"Customer Name","Order Date", "Item Total","Status","Due Date","Delivery Type"};
        String c_name = "";
        String order_date = "";
        int item_total = 0;
        String status ="";
        String due_date ="";
        String delivery_type = "";
        
        
        DefaultTableModel model = new DefaultTableModel();
         model.setColumnIdentifiers(ColumnName);

          Table.setModel(model);
          
          Connection con = myConn.getConnection();
          
          try{
              String sql = "SELECT * FROM OrderManagement WHERE DueDate = ?";
              PreparedStatement ps = con.prepareStatement(sql);
              ps.setString(1,(String)SearchDueDate.getText());
              ResultSet rs = ps.executeQuery();
              
              while(rs.next())
              {
                   c_name = rs.getString("CustomerName");
                   order_date = rs.getString("OrderDate");
                   item_total = rs.getInt("ItemTotal");
                   status = rs.getString("Status");
                   due_date= rs.getString("DueDate");
                   delivery_type = rs.getString("DeliveryType");
              
              model.addRow(new Object[]{c_name, order_date,item_total,status,due_date,delivery_type});
              }
              
              
          }
          catch(SQLException e){
              System.out.println(e.getMessage());
              
          }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void ViewAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewAllActionPerformed
        // TODO add your handling code here:
        getTable();
    }//GEN-LAST:event_ViewAllActionPerformed

    private void DueDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DueDateActionPerformed
        // TODO add your handling code here:
        dueDate.setText(df.format(DueDate.getDate()));
    }//GEN-LAST:event_DueDateActionPerformed

    private void OrderDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrderDateActionPerformed
        // TODO add your handling code here:
         orderDate.setText(df.format(OrderDate.getDate()));
    }//GEN-LAST:event_OrderDateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        OrderDetailForm f = new OrderDetailForm(id,cus_name);
        f.setVisible(true);
        f.setLocationRelativeTo(null); 
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField C_Name;
    private javax.swing.JComboBox<String> DeliveryType;
    private org.jdesktop.swingx.JXDatePicker DueDate;
    private javax.swing.JTextField ItemTotal;
    private org.jdesktop.swingx.JXDatePicker OrderDate;
    private javax.swing.JButton SearchByCustomerName;
    private javax.swing.JButton SearchByDate;
    private javax.swing.JButton SearchByDeliveryType;
    private javax.swing.JTextField SearchDate;
    private javax.swing.JTextField SearchDeliveryType;
    private javax.swing.JTextField SearchDueDate;
    private javax.swing.JTextField SearchName;
    private javax.swing.JComboBox<String> Status;
    private javax.swing.JTable Table;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JButton ViewAll;
    private javax.swing.JLabel dueDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel orderDate;
    // End of variables declaration//GEN-END:variables

    
}
